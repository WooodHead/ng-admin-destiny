{
  "_args": [
    [
      "ng-admin@github:marmelab/ng-admin",
      "/Users/davidramsayreinhart/Downloads/ng-admin-demo"
    ]
  ],
  "_from": "marmelab/ng-admin",
  "_id": "ng-admin@1.0.0-alpha1",
  "_inCache": true,
  "_installable": true,
  "_location": "/ng-admin",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/marmelab/ng-admin/master/package.json",
      "gitUrl": "git://github.com/marmelab/ng-admin.git",
      "httpsUrl": "git+https://github.com/marmelab/ng-admin.git",
      "shortcut": "github:marmelab/ng-admin",
      "ssh": "git@github.com:marmelab/ng-admin.git",
      "sshUrl": "git+ssh://git@github.com/marmelab/ng-admin.git",
      "type": "github"
    },
    "name": "ng-admin",
    "raw": "ng-admin@github:marmelab/ng-admin",
    "rawSpec": "github:marmelab/ng-admin",
    "scope": null,
    "spec": "github:marmelab/ng-admin",
    "type": "hosted"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/marmelab/ng-admin.git#a4d0f86640a87828c8086c111d49b8d579799abb",
  "_shasum": "aa3f69f56113548f82b7afa1884c14415d1c8337",
  "_shrinkwrap": null,
  "_spec": "ng-admin@github:marmelab/ng-admin",
  "_where": "/Users/davidramsayreinhart/Downloads/ng-admin-demo",
  "bugs": {
    "url": "https://github.com/marmelab/ng-admin/issues"
  },
  "dependencies": {},
  "description": "ng-admin [![Build Status](https://travis-ci.org/marmelab/ng-admin.svg?branch=master)](https://travis-ci.org/marmelab/ng-admin) ========",
  "devDependencies": {
    "admin-config": "^0.11.0",
    "angular": "~1.4.8",
    "angular-mocks": "~1.4.8",
    "angular-numeraljs": "^1.1.6",
    "angular-sanitize": "^1.3.15",
    "angular-translate": "^2.11.0",
    "angular-ui-bootstrap": "~1.2.1",
    "angular-ui-codemirror": "^0.3.0",
    "angular-ui-router": "^0.2.14",
    "angularjs": "0.0.1",
    "babel": "^4.6.0",
    "babel-core": "^5.2.17",
    "babel-loader": "^5.0.0",
    "bootstrap-sass": "^3.3.4",
    "chai": "^3.3.0",
    "codemirror": "^5.2.0",
    "core-js": "^0.6.1",
    "css-loader": "^0.12.0",
    "es6-promise": "^2.3.0",
    "exports-loader": "^0.6.2",
    "extract-text-webpack-plugin": "^0.8.0",
    "fakerest": "^1.1.4",
    "file-loader": "^0.8.1",
    "font-awesome": "^4.3.0",
    "html-loader": "^0.3.0",
    "humane-js": "^3.2.2",
    "jasmine": "~2.4.1",
    "jasmine-core": "~2.4.1",
    "jshint-stylish": "~0.1.3",
    "json-server": "~0.8.8",
    "jsonlint": "^1.6.2",
    "karma": "~0.13.21",
    "karma-chrome-launcher": "~0.2.2",
    "karma-jasmine": "~0.3.7",
    "karma-ng-html2js-preprocessor": "~0.2.1",
    "karma-ng-scenario": "~0.1.0",
    "karma-phantomjs-launcher": "~1.0.0",
    "karma-webpack": "~1.7.0",
    "mocha": "^2.1.0",
    "ng-annotate-loader": "0.0.2",
    "ng-annotate-webpack-plugin": "^0.1.2",
    "ng-file-upload": "^7.0.12",
    "nginflection": "^1.1.10",
    "ngtemplate-loader": "^1.3.0",
    "node-libs-browser": "^0.5.0",
    "node-sass": "^3.4.2",
    "nprogress": "^0.2.0",
    "numeral": "^1.5.3",
    "papaparse": "^4.1.1",
    "phantomjs-prebuilt": "~2.1.4",
    "protractor": "~3.1.1",
    "rangy": "^1.3.0",
    "restangular": "~1.5.2",
    "sass-loader": "^0.5.0",
    "sinon": "~1.14.1",
    "style-loader": "^0.12.2",
    "superagent": "^0.18.2",
    "textangular": "1.4.3",
    "ui-select": "github:angular-ui/ui-select#271bf6a03078587c5afdb05f61e826573a13d348",
    "underscore": "^1.8.3",
    "url-loader": "^0.5.5",
    "webpack": "^1.10.0",
    "webpack-dev-server": "^1.10.1"
  },
  "engines": {
    "node": ">=4.2.0"
  },
  "gitHead": "a4d0f86640a87828c8086c111d49b8d579799abb",
  "homepage": "https://github.com/marmelab/ng-admin#readme",
  "license": "MIT",
  "main": "build/ng-admin.min.js",
  "name": "ng-admin",
  "optionalDependencies": {},
  "private": false,
  "readme": "ng-admin [![Build Status](https://travis-ci.org/marmelab/ng-admin.svg?branch=master)](https://travis-ci.org/marmelab/ng-admin)\n========\n\n[![Join the chat at https://gitter.im/marmelab/ng-admin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/marmelab/ng-admin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nPlug me to your RESTFul API to get a complete administration interface (datagrid, filters, complex form widgets, multi-model relationships, dashboard) in no time! Beyond simple CRUD, ng-admin lets you build sophisticated GUIs without getting in your way.\n\n[![Screencast](http://static.marmelab.com/ng-admin-09-video-thumbnail.png)](https://vimeo.com/143909685)\n\n* [Online demo](http://marmelab.com/ng-admin-demo/) ([source](https://github.com/marmelab/ng-admin-demo))\n* [Documentation](http://ng-admin-book.marmelab.com/)\n\n## Installation\n\nThe current ng-admin version (master) depends on Angular.js 1.4. If you need compatibility with Angular 1.3, use [ng-admin 0.9](https://github.com/marmelab/ng-admin/releases/tag/v0.9.1).\n\nGrab ng-admin from your favorite package manager, `npm` or `bower`:\n\n```sh\nnpm install ng-admin --save\n# or\nbower install ng-admin --save\n```\n\nAdd the `ng-admin.min.css` and `ng-admin.min.js` to the HTML, add a `<div ui-view>`, and configure the admin:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <title>My First Admin</title>\n    <link rel=\"stylesheet\" href=\"node_modules/ng-admin/build/ng-admin.min.css\">\n  </head>\n  <body ng-app=\"myApp\">\n    <div ui-view></div>\n    <script src=\"node_modules/ng-admin/build/ng-admin.min.js\"></script>\n    <script type=\"text/javascript\">\n    var myApp = angular.module('myApp', ['ng-admin']);\n    myApp.config(['NgAdminConfigurationProvider', function(NgAdminConfigurationProvider) {\n        var nga = NgAdminConfigurationProvider;\n        // create an admin application\n        var admin = nga.application('My First Admin');\n        // more configuration here later\n        // ...\n        // attach the admin application to the DOM and run it\n        nga.configure(admin);\n    }]);\n    </script>\n  </body>\n</html>\n```\n\n## Getting Started\n\nSee the [Getting Started](doc/Getting-started.md) dedicated chapter for a step-by-step tutorial aimed at beginners.\n\n## Usage Examples\n\n* You can find a simple configuration in the [blog admin demo](http://ng-admin.marmelab.com/#/dashboard) ([source](examples/blog/config.js)), where the entities are posts, comments, and tags.  The remote REST API is simulated in the browser, using [FakeRest](https://github.com/marmelab/FakeRest).\n* The [Posters Galore demo](http://marmelab.com/ng-admin-demo/) ([source](https://github.com/marmelab/ng-admin-demo)) is a more complete example of an e-commerce administration, with custom authentication, pages, directives and modules, all well organized via WebPack. The remote REST API is also simulated in the browser, using [FakeRest](https://github.com/marmelab/FakeRest).\n\n## Configuration Reference\n\nAn administration in ng-admin is made of one *application* containing several *entities*. Each entity has up to 5 *views*, and each view has many *fields*.\n\n```\napplication\n |-header\n |-menu\n |-dashboard\n |-entity[]\n    |-creationView\n    |-editionView\n    |-deletionView\n    |-showView\n    |-listView\n        |-field[]\n           |-name\n           |-type\n```\n\nSee [Configuration API Reference](doc/Configuration-reference.md) dedicated chapter for more details.\n\n**Tip**: You won't find the related classes in the ng-admin project. In fact, the admin configuration API exists as a standalone, framework-agnostic library, called [admin-config](https://github.com/marmelab/admin-config). Don't hesitate to browse the source of that library to learn more.\n\n## Relationships\n\nNg-admin supports relationships between entities in read and write views, and provides specialized field types for that: `reference`, `referenced_list`, `reference_many`, and `embedded_list`. The [Relationships Reference chapter](doc/Relationships.md) describes in more details which field type to use for which case.\n\nAlso, the Fields section of the [Configuration API Reference chapter](doc/Configuration-reference.md) has a list of all settings for each of these field types.\n\n## Menu Configuration\n\nBy default, ng-admin creates a sidebar menu with one entry per entity. If you want to customize this sidebar (labels, icons, order, adding submenus, etc), you have to define menus manually.\n\nSee [Menus Configuration](doc/Menus.md) dedicated chapter.\n\n## Dashboard Configuration\n\nThe home page of a ng-admin application is called the Dashboard. Use it to show important pieces of information to the end user, such as latest entries, or charts.\n\nSee [Dashboard Configuration](doc/Dashboard.md) dedicated chapter.\n\n## Customizing the API Mapping\n\nAll HTTP requests made by ng-admin to your REST API are carried out by [Restangular](https://github.com/mgonto/restangular), which is like `$resource` on steroids.\n\nThe REST specification doesn't provide enough detail to cover all requirements of an administration GUI. ng-admin makes some assumptions about how your API is designed. All of these assumptions can be overridden by way of [Restangular's request and response interceptors](https://github.com/mgonto/restangular#addresponseinterceptor).\n\nThat means you don't need to adapt your API to ng-admin; ng-admin can adapt to any REST API, thanks to the flexibility of Restangular.\n\nSee the [Customizing the API Mapping](doc/API-mapping.md) dedicated chapter.\n\n## Theming\n\nYou can override pretty much all the HTML generated by ng-admin, at different levels.\n\nSee the [Theming](doc/Theming.md) dedicated chapter.\n\n## Translation\n\nThe ng-admin interface uses English as the default language, but supports switching to another language, thanks to [angular-translate](https://angular-translate.github.io/).\n\nSee the [Translation](doc/Translation.md) dedicated chapter.\n\n## Adding Custom Pages\n\nFor each entity, ng-admin creates the necessary pages for Creating, Retrieving, Updating, and Deleting (CRUD) this entity. When you need to achieve more specific actions on an entity, you have to add a custom page - for instance a page asking for an email address to send a message to. How can you route to a specific page and display it in the ng-admin layout?\n\nSee the [Adding Custom Pages](doc/Custom-pages.md) dedicated chapter.\n\n## Adding Custom Types\n\nWhen you map a field between a REST API response and ng-admin, you give it a type. This type determines how the data is displayed and edited. It is very easy to customize existing ng-admin types and add new ones.\n\nSee the [Adding Custom Types](doc/Custom-types.md) dedicated chapter.\n\n## Getting Ready For Production\n\nTo build the ng-admin source with the dependencies you need, and to get hints about performance boosters, head to the [Getting Ready For Production](doc/Production.md) dedicated chapter.\n\n## News\n\nFollow the [marmelab blog](http://marmelab.com/blog/) for news about ng-admin (tutorials, plugins, new releases, etc).\n\nYou should also watch the [ng-admin release page on GitHub](https://github.com/marmelab/ng-admin/releases) for announcements on new releases, and complete changelog.\n\n## Support\n\nNg-admin is an open-source project, with a community getting larger every  day. You will get help by asking politely in any the following channels:\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/ng-admin)\n* [Gitter (live chat)](https://gitter.im/marmelab/ng-admin) [![Join the chat at https://gitter.im/marmelab/ng-admin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/marmelab/ng-admin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nPlease give as much context as possible, including and admin configuration snippet, and the response from the API you're mapping.\n\n## Contributing\n\nYour feedback about the usage of ng-admin in your specific context is valuable, don't hesitate to [open GitHub Issues](https://github.com/marmelab/ng-admin/issues) for any problem or question you may have.\n\nAll contributions are welcome: please send us a Pull Request for any new feature / bug fix in your fork that you consider worth giving back.\n\nAlso, if you have some experience with ng-admin, please answer questions from newcomers in any of the support channels (see above).\n\n### Installing Dependencies\n\nInstall npm dependencies (for tests) by calling the `install` target:\n\n```sh\nmake install\n```\n\n### Running the example app\n\nTo test your changes, run the example app, which is bundled with a sample REST api, by calling:\n\n```sh\nmake run\n```\n\nThen, connect to `http://localhost:8000/` to browse the admin app. This task uses webpack-dev-server, which means that the browser will reload the page as soon as one file in the source is updated. This makes the blog app our preferred live testing environment.\n\n### Testing\n\nng-admin has unit tests (powered by karma) and end to end tests (powered by protractor). Launch the entire tests suite by calling:\n\n```sh\nmake test\n```\n\n**Tip:** If you are working on Karma tests, you can prevent from relaunching the whole process by disabling single-run:\n\n```\nKARMA_SINGLE_RUN=false ./node_modules/.bin/grunt karma:unit\n```\n\n### Releasing\n\nBefore releasing a new version, concatenate and minify the JS and CSS sources into minified scripts with:\n\n```sh\nmake build\ngit add build\ngit commit -m 'update built files'\ngit push origin master\ngit tag vx.x.x\n# publish to bower\ngit push origin --tags\n# publish to npm\nnpm publish\n```\n\n**Tip**: Don't commit built files in Pull Requests, it forces rebases on other PRs. The core team will take care of regularily updating these built files.\n\n## License\n\nng-admin is licensed under the [MIT Licence](LICENSE), and sponsored by [marmelab](http://marmelab.com).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/marmelab/ng-admin.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.0.0-alpha1",
  "warnings": [
    {
      "code": "ENOTSUP",
      "pkgid": "ng-admin@1.0.0-alpha1",
      "required": {
        "node": ">=4.2.0"
      }
    }
  ]
}
